generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  logs          Log[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Exercise {
  slug             String           @unique
  name             String
  force            String?
  level            String
  mechanic         String?
  equipment        String?
  primaryMuscles   String[]
  secondaryMuscles String[]
  instructions     String[]
  category         String
  images           String[]
  LoggedExercise   LoggedExercise[]
}

model LoggedExercise {
  id           String     @unique @default(uuid())
  exerciseSlug String
  exercise     Exercise?  @relation(fields: [exerciseSlug], references: [slug])
  logId        String?
  log          Log?       @relation(fields: [logId], references: [id])
  sets         TypedSet[]
}

enum SetType {
  WEIGHT_REPS
  TIME_DISTANCE
}

model TypedSet {
  id               String          @unique @default(uuid())
  type             SetType         @default(WEIGHT_REPS)
  loggedExercise   LoggedExercise? @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String?
  weight           Int?
  reps             Int?
  distance         String?
  minutes          Int?
  seconds          Int?
}

model Log {
  id        String           @unique @default(uuid())
  date      String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  exercises LoggedExercise[]
}
